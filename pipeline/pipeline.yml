trigger:
- main

variables:
  - group: env-variables
  # Web app name
  - name: webAppName
    value: 'aml-feathr'
  # Agent VM image name
  - name: vmImageName
    value: 'ubuntu-latest'
  # Environment name
  - name: environmentName
    value: 'feathr-env'
  # Environment file path (.yml)
  - name: environmentPath
    value: 'pipeline/conda.yml'
  # Pip requirements path
  - name: requirementsPath
    value: "pipeline/requirements.txt"
  # Python version: 3.9.12
  - name: pythonVersion
    value: '3.9.12'
  # Resource group name
  - name: resourceGroup
    value: 'rizofeathr11'
  # AML workspace name name
  # - name: workspaceName
  #   value: 'mlw-basicex-prod-202212150056'
  # ADO Service Connection name (set it up in the UI; it must have access to Service Principal used by Feathr)
  - name: AzDoServiceConnectionName
    value: 'ADOServiceConnection'
  # Path for the AML config file to be created at
  - name: amlConfigPath
    value: './aml_config.json'
  # Path to data for the AML stage
  # - name: DataPath
  #   value: ''
  #   value: 'azureml://subscriptions/a6c2a7cc-d67e-4a1a-b765-983f08c0423a/resourcegroups/rizofeathr11/workspaces/mlw-basicex-prod-202212150056/datastores/workspaceblobstore/paths/LocalUpload/6bc06dfb068a45eff911b284aa1dd064/data.csv'

  # Project root folder. Point to the folder containing manage.py file.
  # projectRoot: $(System.DefaultWorkingDirectory)

stages:

- stage: Feathr
  displayName: Feathr stage
  jobs:

  - job: RunDemo
    pool:
      vmImage: $(vmImageName)
    steps:
      # - task: UsePythonVersion@0
      #   inputs:
      #     versionSpec: '$(pythonVersion)'
      #   displayName: 'Use Python $(pythonVersion)'

      # - script: conda env create -n $(environmentName) --file $(environmentPath)
      #   displayName: Create Anaconda environment

      # - script: conda env list
      #   displayName:  Verify the environment has been installed
      #   condition: succeeded()

      # - task: Bash@3
      #   inputs:
      #     targetType: 'inline'
      #     script: |
      #       eval "$(conda shell.bash hook)"
      #       echo $(python -V)
      #       conda activate $(environmentName)
      #       pip install -r $(requirementsPath) --use-deprecated=legacy-resolver
      #   displayName: Install requirements

      # - task: Bash@3
      #   inputs:
      #     targetType: 'inline'
      #     script: |
      #       eval "$(conda shell.bash hook)"
      #       conda activate $(environmentName)
      #       python pipeline/main.py --resource_prefix $(RESOURCE_PREFIX) --resource_group $(RESOURCE_GROUP) --azure_subscription_id $(AZURE_SUBSCRIPTION_ID) --azure_client_id $(AZURE_CLIENT_ID) --azure_tenant_id $(AZURE_TENANT_ID) --azure_client_secret $(AZURE_CLIENT_SECRET) --adls_key $(ADLS_KEY)
      #       echo "DataPath: $(DataPath)"
      #   displayName: Run Feathr
      #   condition: succeeded()
      
      - task: AzureCLI@2
        displayName: 'Run AML job'
        inputs:
          azureSubscription: '$(AzDoServiceConnectionName)'
          # scriptType: ps
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            #To install the Machine Learning CLI extension
            az extension remove -n azure-cli-ml
            az extension remove -n ml
            echo "Uninstalled old AzureML CLI."
            az extension add -n ml
            echo "Installed new AzureML CLI."
            az ml job create --file pipeline/aml_pipeline.yml --resource-group $(resourceGroup) --workspace-name $(AML_WORKSPACE_NAME)
          condition: succeeded()
        # workingDirectory: $(projectRoot)
  
  # - job: RunFeathr
  #   dependsOn: CreateEnvironment
  #   pool:
  #     vmImage: $(vmImageName)
  #   steps:
  #   - script: |
  #       python pipeline/main.py
  #     workingDirectory: $(projectRoot)

# - stage: AML
#   displayName: 'AML'
#   dependsOn: Feathr
#   condition: succeeded()
#   jobs:
#   - job: AMLJob
#     pool:
#       vmImage: $(vmImageName)
#     steps:
#       # - task: UsePythonVersion@0
#       #   inputs:
#       #     versionSpec: '$(pythonVersion)'
#       #   displayName: 'Use Python $(pythonVersion)'
#       - script: |
#           echo "Hi"
#           conda init bash
#           echo "Good"
#           conda activate $(environmentName)
#         displayName: Activate Anaconda environment

#       # Ask Mufy about team access level SP.
#       - task: AzureCLI@2
#         displayName: 'Azure CLI'
#         inputs:
#           azureSubscription: '$(AzDoServiceConnectionName)'
#           # scriptType: ps
#           scriptType: pscore
#           scriptLocation: inlineScript
#           inlineScript: |
#             #To install the Machine Learning CLI extension
#             az extension remove -n azure-cli-ml
#             az extension remove -n ml
#             echo "Uninstalled old AzureML CLI."
#             az extension add -n ml
#             echo "Installed new AzureML CLI."
#             az ml job create --file pipeline/aml_job.yml --resource-group $(resourceGroup) --workspace-name $(workspaceName)
          
